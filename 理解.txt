1,本地仓库进行版本控制的流程
  git init //初始化本地仓库
  git status //查看文件追踪状态
  git add [file] 或者 git add .//可全部添加进暂时存储区或添加指定文件
  git commit -m "name" //提交版本到本地仓库,并存下记录
  git log//查看本题仓库的版本号记录
  git reset --hard [对应版本号记录的前六位字符]//回到对应版本
  
2,分支管理问题
  我对分支的理解即让不同人在不同的分支进行操作,修改,各分支的内容不干扰(当然刚刚创建分支的时候,上一分支的内容会复制到当前新建分支)
  可以在各自的分支进行各自的版本控制
  最后完成项目的时候可以把各个分支的任务合并到主分支中
  
  git branch//查看分支,*号所在即当前工作分支
  git checkout [分支标签]//切换分支
  git checkout -b [分支标签]//新建并切换到新分支
  git merge [分支名]//把分支名对应分支合并到当前分支
  
3,远程仓库相关(重难点)
  首先本地仓库能够与远程仓库建立起来,需要对应远程仓库github账号上有本地的ssh密钥
  
  git remote -v //查看当前连接的远程仓库,得到的是名称 + URL,名称为对应URL在本地的标识
  git remote //查看本地远程标识名称
  git remote add [本地远程标识名称] URl//添加本地仓库中包含的远程仓库
  git push -u [本地远程标识符] 本地分支名//注意,对于远程没有对应分支名的,会在远程生成一个同名分支
                                     //但是如果远程有相同的分支名,大概率会失败,因为文件不同步,所有这时候要先clone对应远程仓库使得本地与远程同步